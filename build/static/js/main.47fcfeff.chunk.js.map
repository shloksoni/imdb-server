{"version":3,"sources":["components/header/header.component.jsx","components/bar-chart/bar-chart.component.jsx","components/movie-display/movie-display.component.jsx","components/card/card.component.jsx","components/view-cards/view-cards.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","handleChange","fireQuery","input","className","type","onKeyPress","placeholder","BarChart","modifiedRatings","Ratings","slice","map","rating","OriginalVal","Value","Source","includes","Number","split","console","log","substr","style","width","MovieDisplay","movie","src","Poster","alt","Title","Year","Director","Actors","Card","showMovie","id","onClick","ViewCards","data","Response","Object","keys","length","Search","imdbID","otherProps","key","Error","App","props","event","which","fetch","target","value","then","res","json","setState","result","currentMovie","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.47fcfeff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.styles.scss';\r\nconst Header = ({handleChange,fireQuery,input}) =>{\r\n    return(\r\n        <div className='header'>\r\n            <input className ='search-input' type='text' \r\n                 onKeyPress={fireQuery} \r\n                placeholder='Search and press ENTER'\r\n               \r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './bar-chart.styles.scss';\r\nconst BarChart = ({Ratings}) =>{\r\n    const modifiedRatings =Ratings.slice(0,2);\r\n\r\n    return(\r\n        \r\n        <div className=\"bar-chart\">\r\n           \r\n           {\r\n                modifiedRatings.map(rating=>{\r\n                    rating.OriginalVal = rating.Value;\r\n                    if(rating.Source.includes(\"Int\")){\r\n                        \r\n                        rating.Value = Number(rating.Value.split('/')[0])*10 + \"%\";\r\n                        console.log(rating.Value);\r\n                    }\r\n                    return(\r\n                        <div className = \"bar-container\">\r\n             \r\n                        <div className= {`skills ${rating.Source.substr(0,3)}`} \r\n                            style={{width: `${rating.Value}`}}>{rating.Source}: {rating.OriginalVal} </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default BarChart;","import React from 'react';\r\nimport './movie-display.styles.scss';\r\nimport BarChart from '../bar-chart/bar-chart.component';\r\nconst MovieDisplay = ({movie}) =>{\r\n    console.log(movie);\r\n    return(\r\n        <div className='movie-display'>\r\n           <img src={movie.Poster} className='img' alt={movie.Title} />\r\n           <div className='movie-content'>\r\n               <h1>{movie.Title}</h1>\r\n               <div>\r\n                    <span>{movie.Year}</span>\r\n                    {\r\n                        movie.Director !== \"N/A\"\r\n                        ? <span>, By {movie.Director}</span>\r\n                        : null\r\n                    }\r\n                    \r\n               </div>\r\n               <div className='cast'>\r\n                   <span className='key'>Cast:</span> {movie.Actors}\r\n               </div>\r\n               <BarChart Ratings = {movie.Ratings}/>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MovieDisplay;","import React from 'react';\r\nimport './card.styles.scss';\r\nconst Card = ({Poster,Title,Year,showMovie,id}) =>{\r\n   \r\n    return(\r\n        <div className=\"card\" onClick={()=>showMovie(id)}>\r\n            <img src={Poster} alt=\"Avatar\" className='img'/>\r\n            <div className=\"container\">\r\n                <h4><b>{Title}</b></h4>\r\n                <p>{Year}</p>\r\n            </div>\r\n        </div> \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './view-cards.styles.scss';\r\nimport Card from '../card/card.component'\r\n\r\n\r\nconst ViewCards = ({data, showMovie}) =>{\r\n    console.log(data.Response); \r\n    return(\r\n        <div className='view-cards'>\r\n            {\r\n                Object.keys(data).length !== 0\r\n                ?data.Search\r\n                    ?data.Search.map(({imdbID, ...otherProps})=> {\r\n                        \r\n                        return (<Card key ={imdbID}  id={imdbID} {...otherProps} showMovie ={showMovie}/>);\r\n                    }\r\n                    )\r\n                    : <h1>{data.Error}</h1>\r\n                    \r\n                :\r\n                   null \r\n                    \r\n                \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewCards;","import React from 'react';\nimport './App.scss';\nimport Header from './components/header/header.component';\nimport MovieDisplay from './components/movie-display/movie-display.component';\n\nimport ViewCards from './components/view-cards/view-cards.component';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      result: [],\n      \n      currentMovie :{}\n      \n    }\n  }\n\n  fireQuery = (event) =>{\n    \n    if(event.which === 13  ){\n      \n      \n       // fetch(`http://localhost:3020/search/${this.state.input}`)\n      fetch(`http://localhost:3020/search?search=${event.target.value}`)\n     \n      .then(res => res.json())\n      .then(data => {\n        \n        this.setState({result : data, currentMovie : {}})\n      \n      })\n      \n    }\n  }\n  showMovie=(id)=>{\n     fetch(`http://localhost:3020/search/${id}`)\n     .then(res => res.json())\n     .then(data => this.setState({currentMovie : data}))\n  }\n  render(){\n    return (\n      <div className=\"App\">\n            <Header handleChange ={this.handleChange} fireQuery = {this.fireQuery} input={this.state.input}/>\n            {\n              Object.keys(this.state.currentMovie).length === 0\n              ? <ViewCards data = {this.state.result} showMovie = {this.showMovie}/>\n              : <MovieDisplay movie = {this.state.currentMovie}/>\n\n            }\n            \n          \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}